package com.smuraha.currency_rates.service.processor;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.smuraha.currency_rates.firebase.entity.User;
import com.smuraha.currency_rates.service.enums.Commands;
import com.smuraha.currency_rates.service.processor.commandScripts.CommandScriptService;
import com.smuraha.currency_rates.service.processor.commandScripts.CommandScriptServiceHelp;
import com.smuraha.currency_rates.service.util.CustomCallBack;
import com.smuraha.currency_rates.service.util.JsonMapper;
import com.smuraha.currency_rates.telegram.UpdateController;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.ParseMode;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.List;

import static com.smuraha.currency_rates.service.enums.Commands.RATES;

@Slf4j
@Service
@RequiredArgsConstructor
public class ProcessorServiceImpl implements ProcessorService {

    private final UpdateController updateController;
    private final List<CommandScriptService> commandScripts;
    private final JsonMapper jsonMapper;

    @Override
    public void processUserInput(Update update, User user) {

    }

    @Override
    public void processCommand(Update update) {
        Message message = update.getMessage();
        String userCommand = message.getText();
        Long chatId = message.getChatId();
        try {
            Commands command = Commands.getCommand(userCommand);
            switch (command) {
                case RATES -> {
                    SendMessage sendMessage = getCommandScriptServiceByCommand(RATES).launchScript(update);
                    updateController.processMessage(sendMessage);
                }
                case HELP, START -> {
                    sendTextAnswer("""
                            üëã  –î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –≤–∞–ª—é—Ç
                            ‚ñ∂  –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å  üí∞  –Ω–∞–∂–º–∏—Ç–µ /rates
                            ‚ñ∂  –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è  ‚úì‚úâ  –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π –≤–∞–ª—é—Ç—ã
                            –Ω–∞–∂–º–∏—Ç–µ /subscribe
                            ‚ñ∂  –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è  ‚úï‚úâ  –Ω–∞–∂–º–∏—Ç–µ /unsubscribe
                            ‚ñ∂  –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏  üìà  –ø–æ –∫—É—Ä—Å—É –Ω–∞–∂–º–∏—Ç–µ /rates_stat
                            """, chatId);
                }
                case RATES_STAT -> {
                    String text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É: ";
                    List<List<InlineKeyboardButton>> ratesStatCurrencyButtons;
                    try {
                        ratesStatCurrencyButtons = currencyButtons.stream()
                                .filter(o -> o instanceof CurrencyButtonsChart)
                                .findAny().get()
                                .getCurrencyButtons(update);
                    } catch (JsonProcessingException e) {
                        sendTextAnswer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞–ª—é—Ç—ã!", chatId);
                        log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞–ª—é—Ç—ã!", e);
                        return;
                    }
                    SendMessage sendMessage = telegramUI.getMessageWithButtons(ratesStatCurrencyButtons, text);
                    sendMessage.setChatId(chatId);
                    answerProducer.produce(sendMessage);
                }
                case SUBSCRIBE -> {
                    if (message.getChat().getType().equals("private")) {
                        String text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: ";
                        List<List<InlineKeyboardButton>> subscribeCurrencyButtons;
                        try {
                            subscribeCurrencyButtons = currencyButtons.stream()
                                    .filter(o -> o instanceof CurrencyButtonsSubscribe)
                                    .findAny().get()
                                    .getCurrencyButtons(update);
                        } catch (JsonProcessingException e) {
                            sendTextAnswer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞–ª—é—Ç—ã!", chatId);
                            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞–ª—é—Ç—ã!", e);
                            return;
                        }
                        if (subscribeCurrencyButtons == null) {
                            sendTextAnswer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –≤–∞–ª—é—Ç—ã", chatId);
                            return;
                        }
                        SendMessage sendMessage = telegramUI.getMessageWithButtons(subscribeCurrencyButtons, text);
                        sendMessage.setChatId(chatId);
                        answerProducer.produce(sendMessage);
                    } else {
                        sendTextAnswer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º!", chatId);
                    }
                }
                case UNSUBSCRIBE -> {
                    if (message.getChat().getType().equals("private")) {
                        String text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è: ";
                        List<List<InlineKeyboardButton>> unsubscribeCurrencyButtons;
                        try {
                            unsubscribeCurrencyButtons = currencyButtons.stream()
                                    .filter(o -> o instanceof CurrencyButtonsUnsubscribe)
                                    .findAny().get()
                                    .getCurrencyButtons(update);
                        } catch (JsonProcessingException e) {
                            sendTextAnswer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞–ª—é—Ç—ã!", chatId);
                            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞–ª—é—Ç—ã!", e);
                            return;
                        }
                        if (unsubscribeCurrencyButtons == null) {
                            sendTextAnswer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –≤–∞–ª—é—Ç", chatId);
                            return;
                        }
                        SendMessage sendMessage = telegramUI.getMessageWithButtons(unsubscribeCurrencyButtons, text);
                        sendMessage.setChatId(chatId);
                        answerProducer.produce(sendMessage);
                    } else {
                        sendTextAnswer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º!", chatId);
                    }
                }
            }
        } catch (UnsupportedOperationException e) {
            log.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É");
            sendTextAnswer(e.getMessage(), chatId);
        }

    }

    private CommandScriptService getCommandScriptServiceByCommand(Commands command) {
        return commandScripts.stream()
                .filter(script -> script.getScriptCommand().equals(command))
                .findFirst()
                .orElse(new CommandScriptServiceHelp());
    }

    private CommandScriptService getCommandScriptServiceById(String id) {
        return commandScripts.stream()
                .filter(script -> script.getCommandId().equals(id))
                .findFirst()
                .orElse(new CommandScriptServiceHelp());
    }


    @Override
    public void processCallback(Update update) {
        CallbackQuery callbackQuery = update.getCallbackQuery();
        Long chatId = callbackQuery.getMessage().getChatId();
        String queryData = callbackQuery.getData();
        if (!queryData.equals("IGNORE")) {
            CustomCallBack customCallBack = jsonMapper.readCustomCallBack(queryData);
            SendMessage sendMessage = getCommandScriptServiceById(customCallBack.getId()).processCallback(update);
            if (sendMessage == null) {
                return;
            }
            InlineKeyboardMarkup replyMarkup = (InlineKeyboardMarkup) sendMessage.getReplyMarkup();
            EditMessageText editMessageText = new EditMessageText();
            editMessageText.setChatId(chatId);
            editMessageText.setMessageId(callbackQuery.getMessage().getMessageId());
            editMessageText.setText(sendMessage.getText());
            editMessageText.setParseMode(ParseMode.HTML);
            editMessageText.setReplyMarkup(replyMarkup);
            updateController.processMessage(editMessageText);
        }
    }

    @Override
    public void processCancel(Update update, User user) {

    }

    private void sendTextAnswer(String output, Long chatId) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(output);
        updateController.processMessage(sendMessage);
    }
}
